import pandas as pd
lvl1 = [] with open('palavras/lvl1.txt','r') as f:
lvl1 = ''
with open('palavras/lvl1.txt','r') as f:
	lvl1 = pd.read_csv(f)
exit
import pandas as pd
lvl1 = ''
with open('palavras/lvl1.txt','r') as f:
	lvl1 = pd.read_csv(f)
lvl1
with open('palavras/lvl1.txt','r') as f:
	lvl1 = pd.read_csv(f, header=None)
lvl1
lvl1["char"] = len(lvl1[0])
lvl1
lvl1["char"] = lvl1[0].lenght()
lvl1["char"] = lvl1[0].length()
lvl1
lvl1["char"] = lvl1[0].str.len()
lvl1
lvl1.sort_values('char')
lvl1
lvl1.sort_values('char')
lvl1 = lvl1.sort_values('char')
import matplotlib.pyplot as plt
!pip install matplotlib
import pandas as pd
import matplotlib.pyplot as plt
lvl1 = ''
with open('palavras/lvl1.txt','r') as f:
	lvl1 = pd.read_csv(f, header=None)
lvl1["char"] = lvl1[0].str.len()
lvl1
with open('palavras/lvl1.txt','r') as f:
	lvl1 = pd.read_csv(f, header=None)
lvl1
lvl1['char'] = lvl1[0].str.len()
lvl1.sort_by('char')
lvl1.sort_values('char')
lvl1 = lvl1.sort_values('char')
plt.hist(lvl1['char'])
plt.show()
lvl2 = ''
with open('palavras/lvl2.txt','r') as f:
	lvl2 = pd.read_csv(f, header=None)
lvl2['char'] = lvl2[0].str.len()
lvl2 = lvl2.sort_values('char')
plt.hist(lvl2['char'])
plt.show
plt.show()
lvl3 = ''
with open('palavras/lvl3.txt','r') as f:
	lvl3 = pd.read_csv(f, header=None)
lvl3['char'] = lvl3[0].str.len()
plt.hist(lvl3['char'])
plt.show()
max(lvl1[1].str.len())
max(lvl2[1].str.len())
max(lvl3[1].str.len())
lvl1['char'].hist()
pd.DataFrame.hist(lvl1['char'])
lvl1['char'].hist()
lvl1['char'].value_counts().sort_index()
lvl2['char'].value_counts().sort_index()
lvl3['char'].value_counts().sort_index()
lvl1.sort_values('char')
lvl1 = lvl1.sort_values('char')
lvl2 = lvl2.sort_values('char')
lvl3 = lvl3.sort_values('char')
lvl1
df.to_csv('palavras/lvl1_df.csv', sep=' ', encoding='utf-8', index=False, header=False)
lvl1.to_csv('palavras/lvl1_df.csv', sep=' ', encoding='utf-8', index=False, header=False)
lvl1['char'].int.bin()
lvl1['char'].integer.bin()
lvl1['char'].apply(lambda x : bin(x)[2:])
lvl1['binary_char'] = lvl1['char'].apply(lambda x : bin(x)[2:])
lvl2['binary_char'] = lvl2['char'].apply(lambda x : bin(x)[2:])
lvl3['binary_char'] = lvl3['char'].apply(lambda x : bin(x)[2:])
lvl1[0].apply(lambda x:)
def get_bin(s):
	for x in s:
		
def get_bin(s):
	ans = ''
	for x in s:
		
lvl1[0].apply(lambda s: ' '.join(format(ord(x), '08b') for x in s))
lvl1['binary_word'] = lvl1[0].apply(lambda s: ' '.join(format(ord(x), '08b') for x in s))
lvl1['binary_tip'] = lvl1[1].apply(lambda s: ' '.join(format(ord(x), '08b') for x in s))
lvl2['binary_word'] = lvl2[0].apply(lambda s: ' '.join(format(ord(x), '08b') for x in s))
lvl2['binary_tip'] = lvl2[1].apply(lambda s: ' '.join(format(ord(x), '08b') for x in s))
lvl3['binary_word'] = lvl3[0].apply(lambda s: ' '.join(format(ord(x), '08b') for x in s))
lvl3['binary_tip'] = lvl3[1].apply(lambda s: ' '.join(format(ord(x), '08b') for x in s))
lvl1
lvl1['char_tip'] = lvl1[1].str.len()
lvl1
lvl1['binary_char_tip'] = lvl1['char_tip'].apply(lambda x : bin(x)[2:])
lvl1
bin_lvl1 = lvl1[['binary_char', 'binary_char_tip', 'binary_word', 'binary_tip']]
bin_lvl1
lvl2
lvl2['char_tip'] = lvl2[1].str.len()
lvl3['char_tip'] = lvl3[1].str.len()
lvl2['binary_char_tip'] = lvl2['char_tip'].apply(lambda x : bin(x)[2:])
lvl3['binary_char_tip'] = lvl3['char_tip'].apply(lambda x : bin(x)[2:])
bin_lvl2 = lvl2[['binary_char', 'binary_char_tip', 'binary_word', 'binary_tip']]
lvl1_output lvl3[['binary_char', 'binary_char_tip', 'binary_word', 'binary_tip']]

bin_lvl2
bin_lvl3
bin_lvl1['binary_char'].apply(lambda x: int(x,2))
bin_lvl1['binary_char'].apply(lambda x: int(x,2) - 1)
bin_lvl1['binary_char'].apply(lambda x: format(int(x,2) - 1, '08b'))
bin_lvl1['binary_char'] = bin_lvl1['binary_char'].apply(lambda x: format(int(x,2) - 1, '08b'))
bin_lvl1['binary_char_normalized'] = bin_lvl1['binary_char'].apply(lambda x: format(int(x,2) - 1, '08b'))
bin_lvl1['binary_char'].apply(lambda x: format(int(x,2) - 1, '08b'))
bin_lvl1['normal_bin_char'] = bin_lvl1['binary_char'].apply(lambda x: format(int(x,2) - 1, '08b'))
lvl1_output = bin_lvl1['binary_char'].apply(lambda x: format(int(x,2) - 1, '08b'))
lvl1_output
del(lvl1_output)
lvl1_output
lvl1_output = bin_lvl1['binary_char'].apply(lambda x: format(int(x,2) - 1, '04b'))
del(lvl1_output)
bin_lvl1['binary_char'].apply(lambda x: format(int(x,2) - 1, '04b'))
bin_lvl2['binary_char'].apply(lambda x: format(int(x,2) - 1, '04b'))
bin_lvl3['binary_char'].apply(lambda x: format(int(x,2) - 1, '04b'))
bin_lvl1['binary_char_norm'] = bin_lvl1['binary_char'].apply(lambda x: format(int(x,2) - 1, '04b'))
bin_lvl1
bin_lvl1['binary_tip_norm'] = bin_lvl1['binary_tip'].apply(lambda x: format(int(x,2) - 1, '04b'))
bin_lvl1['binary_char_tip_norm'] = bin_lvl1['binary_char_tip'].apply(lambda x: format(int(x,2) - 1, '04b'))
bin_lvl1
bin_lvl1.columns
bin_lvl1[['binary_char_norm', 'binary_char_tip_norm', 'binary_word','binary_tip']]
bin_lvl1[['binary_char_norm', 'binary_char_tip_norm', 'binary_word','binary_tip']].to_csv('palavras/lvl1.dat', sep=" ", encoding='utf-8',index=False, header=False)
bin_lvl2['binary_char_norm'] = bin_lvl2['binary_char'].apply(lambda x: format(int(x,2) - 1, '04b'))
bin_lvl2['binary_char_tip_norm'] = bin_lvl2['binary_char_tip'].apply(lambda x: format(int(x,2) - 1, '04b'))
bin_lvl3['binary_char_norm'] = bin_lvl3['binary_char'].apply(lambda x: format(int(x,2) - 1, '04b'))
bin_lvl3['binary_char_tip_norm'] = bin_lvl3['binary_char_tip'].apply(lambda x: format(int(x,2) - 1, '04b'))
bin_lvl2[['binary_char_norm', 'binary_char_tip_norm', 'binary_word','binary_tip']].to_csv('palavras/lvl2.dat', sep=" ", encoding='utf-8',index=False, header=False)
bin_lvl3[['binary_char_norm', 'binary_char_tip_norm', 'binary_word','binary_tip']].to_csv('palavras/lvl3.dat', sep=" ", encoding='utf-8',index=False, header=False)
readline.write_history_file("palavras/commands_history.txt")
import readline
readline.write_history_file("palavras/commands_history.txt")