--Top level do receptor pré-experiência 7
library IEEE;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;

entity exp6 is
	port(
		pre_BRG_clock, reset : in std_logic;
		serial_in : in std_logic;
		uc_currentState : out unsigned(3 downto 0);
		sevensegment_left, sevensegment_right : out std_logic_vector(6 downto 0);
		uc_counter_viewer : out unsigned(3 downto 0);
		rsr_counter_viewer : out unsigned(3 downto 0);
		parity_led : out std_logic;
		BRG_clock_out_viewer : out std_logic;
		parallel_out : out std_logic_vector(7 downto 0)
	);
end entity;

architecture toplevel of exp6 is
	component uc is
	port(
		clock, reset, serial_in : in std_logic;
		load_for_rsr : out std_logic;
		currentState : out unsigned(3 downto 0);
		counter_viewer : out unsigned(3 downto 0);
		parity_bit_time, parity_bit : out std_logic
	);
	end component;
	
	component rsr is
	port(
		clock, reset, load : in std_logic;
		serial_in : in std_logic;
		parallel_out : out std_logic_vector(7 downto 0) := (others => '0');
		counter_viewer : out unsigned(3 downto 0)
	);
	end component;
	
	component pd is
	port(
		enable : in std_logic;
		parallel_in : in std_logic_vector(7 downto 0);
		received_parity_bit : in std_logic;
		parity_led : out std_logic := '0' -- =1 se houver erro de paridade
	);
	end component;
	
	component BRG is
	port(
		clock_in, reset : in std_logic;
		clock_out : out std_logic := '0';
		divisor : in std_logic_vector(15 downto 0) --Se divisor for um n ímpar, a divisão do clock será de fator n - 1
	);
	end component;
	
	component ss_out is
	port(
		reset : in std_logic;
		bits_in : in std_logic_vector(3 downto 0);
		seg_out : out std_logic_vector(6 downto 0)
	);
	end component;
	
	signal BRG_clock_out : std_logic;
	signal connection_uc_to_rsr_for_load : std_logic;
	signal connection_uc_to_pd_enable, connection_uc_to_pd_paritybit : std_logic;
	signal rsr_parallel_out : std_logic_vector(7 downto 0) := (others => '0');
	
	begin
		un_controle : uc  port map(BRG_clock_out, reset, serial_in, connection_uc_to_rsr_for_load, uc_currentState, uc_counter_viewer, connection_uc_to_pd_enable, connection_uc_to_pd_paritybit);
		registrador : rsr port map(BRG_clock_out, reset, connection_uc_to_rsr_for_load, serial_in, rsr_parallel_out, rsr_counter_viewer);
		paritydect :   pd port map(connection_uc_to_pd_enable, rsr_parallel_out, connection_uc_to_pd_paritybit, parity_led);
		baudrategen: brg  port map(pre_BRG_clock, reset, BRG_clock_out, "0000000000001100");
		ss_for_4lsb : ss_out port map(reset, rsr_parallel_out(3 downto 0), sevensegment_right);
		ss_for_4msb : ss_out port map(reset, rsr_parallel_out(7 downto 4), sevensegment_left);
		BRG_clock_out_viewer <= BRG_clock_out;
		
		parallel_out <= rsr_parallel_out;
end architecture;